# 프로젝트 개발 규칙 및 가이드라인

## 1. 기술 스택 및 도구
### 1.1 핵심 기술
  ```typescript
  const techStack = {
    framework: 'Next.js 14 (App Router)',
    language: 'TypeScript',
    database: 'PostgreSQL',
    auth: 'Clerk',
    ui: 'shadcn/ui + Tailwind CSS',
    stateManagement: 'Zustand',
    packageManager: 'npm'
  }
  ```

### 1.2 개발 환경 설정
  ```bash
  # 프로젝트 초기 설정
  npm create next-app@latest --typescript --tailwind --app
  npm install @clerk/nextjs
  npx shadcn-ui@latest init
  npm install zustand
  ```

## 2. 코드 구조 및 명명 규칙
### 2.1 프로젝트 구조
  ```plaintext
  your-nextjs-project/
  ├── app/                      # App Router 기반 페이지
  │   ├── (auth)/              # 인증 관련 라우트 그룹
  │   ├── (dashboard)/         # 대시보드 라우트 그룹
  │   └── api/                 # Route Handlers
  ├── components/              # 재사용 컴포넌트
  │   ├── ui/                 # shadcn 컴포넌트
  │   └── common/             # 공통 컴포넌트
  ├── lib/                    # 유틸리티 및 설정
  │   ├── db/                # 데이터베이스 설정
  │   └── utils/             # 유틸리티 함수
  └── types/                 # TypeScript 타입 정의
  ```

### 2.2 명명 규칙
  ```typescript
  // 인터페이스 정의
  interface IUser {
    id: string;
    name: string;
    role: 'FARMER' | 'WORKER';
  }

  // 컴포넌트 명명
  const UserProfileCard: React.FC<IUserProfileProps> = () => {
    return <div>...</div>;
  };
  ```

## 3. API 및 데이터 처리
### 3.1 Route Handler 구현
  ```typescript
  // app/api/jobs/route.ts
  import { NextResponse } from 'next/server';
  import { auth } from '@clerk/nextjs';
  import { db } from '@/lib/db';

  export async function GET() {
    try {
      const { userId } = auth();
      if (!userId) {
        return NextResponse.json(
          { error: 'Unauthorized' },
          { status: 401 }
        );
      }
      // 데이터베이스 조회 로직
      const jobs = await db.query(
        'SELECT * FROM jobs WHERE user_id = $1',
        [userId]
      );
      return NextResponse.json({ jobs });
    } catch (error) {
      return NextResponse.json(
        { error: 'Internal Server Error' },
        { status: 500 }
      );
    }
  }
  ```

### 3.1 상태 관리 (Zustand)
  ```typescript
  // stores/useStore.ts
  import { create } from 'zustand'
  
  interface AppState {
    count: number
    increment: () => void
    decrement: () => void
  }
  
  const useStore = create<AppState>((set) => ({
    count: 0,
    increment: () => set((state) => ({ count: state.count + 1 })),
    decrement: () => set((state) => ({ count: state.count - 1 })),
  }))
  
  export default useStore
  ```

### 3.2 상태 관리 규칙
  - 전역 상태는 최소한으로 유지
  - 상태 업데이트는 불변성 유지
  - 복잡한 상태 로직은 별도 함수로 분리
  - 비동기 액션은 async/await 사용
  - DevTools 활용하여 상태 디버깅

## 4. 인증 및 보안
### 4.1 Clerk 미들웨어 설정
  ```typescript
  // middleware.ts
  import { authMiddleware } from '@clerk/nextjs';

  export default authMiddleware({
    publicRoutes: [
      '/',
      '/api/public/(.*)',
      '/about'
    ]
  });

  export const config = {
    matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)']
  };
  ```

## 5. Git 커밋 규칙
### 5.1 커밋 메시지 구조
  ```plaintext
  <type>(<scope>): <subject>

  <body>

  <footer>
  ```

### 5.2 커밋 타입
  ```typescript
  const commitTypes = {
    feat: '새로운 기능 추가',
    fix: '버그 수정',
    docs: '문서 수정',
    style: '코드 포맷팅',
    refactor: '코드 리팩토링',
    test: '테스트 코드',
    chore: '빌드 업무 수정'
  } as const;
  ```
### 5.2 커밋 메시지 언어
  ```plaintext
  한글로 작성
  ```

## 6. 품질 관리
### 6.1 코드 품질
  - TypeScript strict 모드 사용
  - ESLint 규칙 준수
  - 컴포넌트 단위 테스트 작성

### 6.2 성능 최적화
  - 이미지 최적화
  - 코드 스플리팅
  - 캐싱 전략 수립
  - 상태 업데이트 최적화
  - 선택적 상태 구독 